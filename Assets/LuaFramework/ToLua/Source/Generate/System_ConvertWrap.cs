//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_ConvertWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("Convert");
		L.RegFunction("FromBase64CharArray", FromBase64CharArray);
		L.RegFunction("FromBase64String", FromBase64String);
		L.RegFunction("GetTypeCode", GetTypeCode);
		L.RegFunction("IsDBNull", IsDBNull);
		L.RegFunction("ToBase64CharArray", ToBase64CharArray);
		L.RegFunction("ToBase64String", ToBase64String);
		L.RegFunction("ToBoolean", ToBoolean);
		L.RegFunction("ToByte", ToByte);
		L.RegFunction("ToChar", ToChar);
		L.RegFunction("ToDateTime", ToDateTime);
		L.RegFunction("ToDecimal", ToDecimal);
		L.RegFunction("ToDouble", ToDouble);
		L.RegFunction("ToInt16", ToInt16);
		L.RegFunction("ToInt32", ToInt32);
		L.RegFunction("ToInt64", ToInt64);
		L.RegFunction("ToSByte", ToSByte);
		L.RegFunction("ToSingle", ToSingle);
		L.RegFunction("ToString", ToString);
		L.RegFunction("ToUInt16", ToUInt16);
		L.RegFunction("ToUInt32", ToUInt32);
		L.RegFunction("ToUInt64", ToUInt64);
		L.RegFunction("ChangeType", ChangeType);
		L.RegVar("DBNull", get_DBNull, null);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FromBase64CharArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			char[] arg0 = ToLua.CheckCharBuffer(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			byte[] o = System.Convert.FromBase64CharArray(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FromBase64String(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			byte[] o = System.Convert.FromBase64String(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTypeCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			object arg0 = ToLua.ToVarObject(L, 1);
			System.TypeCode o = System.Convert.GetTypeCode(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsDBNull(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			object arg0 = ToLua.ToVarObject(L, 1);
			bool o = System.Convert.IsDBNull(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToBase64CharArray(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5)
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				char[] arg3 = ToLua.CheckCharBuffer(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				int o = System.Convert.ToBase64CharArray(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6)
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				char[] arg3 = ToLua.CheckCharBuffer(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				System.Base64FormattingOptions arg5 = (System.Base64FormattingOptions)ToLua.CheckObject(L, 6, typeof(System.Base64FormattingOptions));
				int o = System.Convert.ToBase64CharArray(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Convert.ToBase64CharArray");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToBase64String(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				string o = System.Convert.ToBase64String(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2)
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				System.Base64FormattingOptions arg1 = (System.Base64FormattingOptions)ToLua.CheckObject(L, 2, typeof(System.Base64FormattingOptions));
				string o = System.Convert.ToBase64String(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3)
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				string o = System.Convert.ToBase64String(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 4)
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Base64FormattingOptions arg3 = (System.Base64FormattingOptions)ToLua.CheckObject(L, 4, typeof(System.Base64FormattingOptions));
				string o = System.Convert.ToBase64String(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Convert.ToBase64String");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToBoolean(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<long>(L, 1))
			{
				long arg0 = LuaDLL.tolua_toint64(L, 1);
				bool o = System.Convert.ToBoolean(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				bool o = System.Convert.ToBoolean(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<ulong>(L, 1))
			{
				ulong arg0 = LuaDLL.tolua_touint64(L, 1);
				bool o = System.Convert.ToBoolean(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<bool>(L, 1))
			{
				bool arg0 = LuaDLL.lua_toboolean(L, 1);
				bool o = System.Convert.ToBoolean(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.DateTime>(L, 1))
			{
				System.DateTime arg0 = StackTraits<System.DateTime>.To(L, 1);
				bool o = System.Convert.ToBoolean(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<double>(L, 1))
			{
				double arg0 = (double)LuaDLL.lua_tonumber(L, 1);
				bool o = System.Convert.ToBoolean(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<object>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				bool o = System.Convert.ToBoolean(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, System.IFormatProvider>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				bool o = System.Convert.ToBoolean(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object, System.IFormatProvider>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				bool o = System.Convert.ToBoolean(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Convert.ToBoolean");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToByte(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<long>(L, 1))
			{
				long arg0 = LuaDLL.tolua_toint64(L, 1);
				byte o = System.Convert.ToByte(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				byte o = System.Convert.ToByte(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<ulong>(L, 1))
			{
				ulong arg0 = LuaDLL.tolua_touint64(L, 1);
				byte o = System.Convert.ToByte(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<bool>(L, 1))
			{
				bool arg0 = LuaDLL.lua_toboolean(L, 1);
				byte o = System.Convert.ToByte(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.DateTime>(L, 1))
			{
				System.DateTime arg0 = StackTraits<System.DateTime>.To(L, 1);
				byte o = System.Convert.ToByte(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<double>(L, 1))
			{
				double arg0 = (double)LuaDLL.lua_tonumber(L, 1);
				byte o = System.Convert.ToByte(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<object>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				byte o = System.Convert.ToByte(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, System.IFormatProvider>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				byte o = System.Convert.ToByte(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, int>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				byte o = System.Convert.ToByte(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object, System.IFormatProvider>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				byte o = System.Convert.ToByte(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Convert.ToByte");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToChar(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<long>(L, 1))
			{
				long arg0 = LuaDLL.tolua_toint64(L, 1);
				char o = System.Convert.ToChar(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				char o = System.Convert.ToChar(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<ulong>(L, 1))
			{
				ulong arg0 = LuaDLL.tolua_touint64(L, 1);
				char o = System.Convert.ToChar(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<bool>(L, 1))
			{
				bool arg0 = LuaDLL.lua_toboolean(L, 1);
				char o = System.Convert.ToChar(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.DateTime>(L, 1))
			{
				System.DateTime arg0 = StackTraits<System.DateTime>.To(L, 1);
				char o = System.Convert.ToChar(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<double>(L, 1))
			{
				double arg0 = (double)LuaDLL.lua_tonumber(L, 1);
				char o = System.Convert.ToChar(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<object>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				char o = System.Convert.ToChar(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, System.IFormatProvider>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				char o = System.Convert.ToChar(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object, System.IFormatProvider>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				char o = System.Convert.ToChar(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Convert.ToChar");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToDateTime(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<System.DateTime>(L, 1))
			{
				System.DateTime arg0 = StackTraits<System.DateTime>.To(L, 1);
				System.DateTime o = System.Convert.ToDateTime(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<double>(L, 1))
			{
				double arg0 = (double)LuaDLL.lua_tonumber(L, 1);
				System.DateTime o = System.Convert.ToDateTime(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<bool>(L, 1))
			{
				bool arg0 = LuaDLL.lua_toboolean(L, 1);
				System.DateTime o = System.Convert.ToDateTime(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<long>(L, 1))
			{
				long arg0 = LuaDLL.tolua_toint64(L, 1);
				System.DateTime o = System.Convert.ToDateTime(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.DateTime o = System.Convert.ToDateTime(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<ulong>(L, 1))
			{
				ulong arg0 = LuaDLL.tolua_touint64(L, 1);
				System.DateTime o = System.Convert.ToDateTime(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<object>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.DateTime o = System.Convert.ToDateTime(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, System.IFormatProvider>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				System.DateTime o = System.Convert.ToDateTime(arg0, arg1);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object, System.IFormatProvider>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				System.DateTime o = System.Convert.ToDateTime(arg0, arg1);
				ToLua.PushValue(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Convert.ToDateTime");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToDecimal(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<long>(L, 1))
			{
				long arg0 = LuaDLL.tolua_toint64(L, 1);
				decimal o = System.Convert.ToDecimal(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				decimal o = System.Convert.ToDecimal(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<ulong>(L, 1))
			{
				ulong arg0 = LuaDLL.tolua_touint64(L, 1);
				decimal o = System.Convert.ToDecimal(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<bool>(L, 1))
			{
				bool arg0 = LuaDLL.lua_toboolean(L, 1);
				decimal o = System.Convert.ToDecimal(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.DateTime>(L, 1))
			{
				System.DateTime arg0 = StackTraits<System.DateTime>.To(L, 1);
				decimal o = System.Convert.ToDecimal(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<double>(L, 1))
			{
				double arg0 = (double)LuaDLL.lua_tonumber(L, 1);
				decimal o = System.Convert.ToDecimal(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<object>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				decimal o = System.Convert.ToDecimal(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, System.IFormatProvider>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				decimal o = System.Convert.ToDecimal(arg0, arg1);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object, System.IFormatProvider>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				decimal o = System.Convert.ToDecimal(arg0, arg1);
				ToLua.PushValue(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Convert.ToDecimal");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToDouble(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<long>(L, 1))
			{
				long arg0 = LuaDLL.tolua_toint64(L, 1);
				double o = System.Convert.ToDouble(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				double o = System.Convert.ToDouble(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<ulong>(L, 1))
			{
				ulong arg0 = LuaDLL.tolua_touint64(L, 1);
				double o = System.Convert.ToDouble(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<bool>(L, 1))
			{
				bool arg0 = LuaDLL.lua_toboolean(L, 1);
				double o = System.Convert.ToDouble(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.DateTime>(L, 1))
			{
				System.DateTime arg0 = StackTraits<System.DateTime>.To(L, 1);
				double o = System.Convert.ToDouble(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<double>(L, 1))
			{
				double arg0 = (double)LuaDLL.lua_tonumber(L, 1);
				double o = System.Convert.ToDouble(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<object>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				double o = System.Convert.ToDouble(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, System.IFormatProvider>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				double o = System.Convert.ToDouble(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object, System.IFormatProvider>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				double o = System.Convert.ToDouble(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Convert.ToDouble");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToInt16(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<long>(L, 1))
			{
				long arg0 = LuaDLL.tolua_toint64(L, 1);
				short o = System.Convert.ToInt16(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				short o = System.Convert.ToInt16(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<ulong>(L, 1))
			{
				ulong arg0 = LuaDLL.tolua_touint64(L, 1);
				short o = System.Convert.ToInt16(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<bool>(L, 1))
			{
				bool arg0 = LuaDLL.lua_toboolean(L, 1);
				short o = System.Convert.ToInt16(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.DateTime>(L, 1))
			{
				System.DateTime arg0 = StackTraits<System.DateTime>.To(L, 1);
				short o = System.Convert.ToInt16(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<double>(L, 1))
			{
				double arg0 = (double)LuaDLL.lua_tonumber(L, 1);
				short o = System.Convert.ToInt16(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<object>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				short o = System.Convert.ToInt16(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, System.IFormatProvider>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				short o = System.Convert.ToInt16(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, int>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				short o = System.Convert.ToInt16(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object, System.IFormatProvider>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				short o = System.Convert.ToInt16(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Convert.ToInt16");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToInt32(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<long>(L, 1))
			{
				long arg0 = LuaDLL.tolua_toint64(L, 1);
				int o = System.Convert.ToInt32(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				int o = System.Convert.ToInt32(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<ulong>(L, 1))
			{
				ulong arg0 = LuaDLL.tolua_touint64(L, 1);
				int o = System.Convert.ToInt32(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<bool>(L, 1))
			{
				bool arg0 = LuaDLL.lua_toboolean(L, 1);
				int o = System.Convert.ToInt32(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.DateTime>(L, 1))
			{
				System.DateTime arg0 = StackTraits<System.DateTime>.To(L, 1);
				int o = System.Convert.ToInt32(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<double>(L, 1))
			{
				double arg0 = (double)LuaDLL.lua_tonumber(L, 1);
				int o = System.Convert.ToInt32(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<object>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				int o = System.Convert.ToInt32(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, System.IFormatProvider>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				int o = System.Convert.ToInt32(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, int>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				int o = System.Convert.ToInt32(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object, System.IFormatProvider>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				int o = System.Convert.ToInt32(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Convert.ToInt32");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToInt64(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<long>(L, 1))
			{
				long arg0 = LuaDLL.tolua_toint64(L, 1);
				long o = System.Convert.ToInt64(arg0);
				LuaDLL.tolua_pushint64(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				long o = System.Convert.ToInt64(arg0);
				LuaDLL.tolua_pushint64(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<ulong>(L, 1))
			{
				ulong arg0 = LuaDLL.tolua_touint64(L, 1);
				long o = System.Convert.ToInt64(arg0);
				LuaDLL.tolua_pushint64(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<bool>(L, 1))
			{
				bool arg0 = LuaDLL.lua_toboolean(L, 1);
				long o = System.Convert.ToInt64(arg0);
				LuaDLL.tolua_pushint64(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.DateTime>(L, 1))
			{
				System.DateTime arg0 = StackTraits<System.DateTime>.To(L, 1);
				long o = System.Convert.ToInt64(arg0);
				LuaDLL.tolua_pushint64(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<double>(L, 1))
			{
				double arg0 = (double)LuaDLL.lua_tonumber(L, 1);
				long o = System.Convert.ToInt64(arg0);
				LuaDLL.tolua_pushint64(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<object>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				long o = System.Convert.ToInt64(arg0);
				LuaDLL.tolua_pushint64(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, System.IFormatProvider>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				long o = System.Convert.ToInt64(arg0, arg1);
				LuaDLL.tolua_pushint64(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, int>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				long o = System.Convert.ToInt64(arg0, arg1);
				LuaDLL.tolua_pushint64(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object, System.IFormatProvider>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				long o = System.Convert.ToInt64(arg0, arg1);
				LuaDLL.tolua_pushint64(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Convert.ToInt64");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToSByte(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<long>(L, 1))
			{
				long arg0 = LuaDLL.tolua_toint64(L, 1);
				sbyte o = System.Convert.ToSByte(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				sbyte o = System.Convert.ToSByte(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<ulong>(L, 1))
			{
				ulong arg0 = LuaDLL.tolua_touint64(L, 1);
				sbyte o = System.Convert.ToSByte(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<bool>(L, 1))
			{
				bool arg0 = LuaDLL.lua_toboolean(L, 1);
				sbyte o = System.Convert.ToSByte(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.DateTime>(L, 1))
			{
				System.DateTime arg0 = StackTraits<System.DateTime>.To(L, 1);
				sbyte o = System.Convert.ToSByte(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<double>(L, 1))
			{
				double arg0 = (double)LuaDLL.lua_tonumber(L, 1);
				sbyte o = System.Convert.ToSByte(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<object>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				sbyte o = System.Convert.ToSByte(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, System.IFormatProvider>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				sbyte o = System.Convert.ToSByte(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, int>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				sbyte o = System.Convert.ToSByte(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object, System.IFormatProvider>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				sbyte o = System.Convert.ToSByte(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Convert.ToSByte");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToSingle(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<long>(L, 1))
			{
				long arg0 = LuaDLL.tolua_toint64(L, 1);
				float o = System.Convert.ToSingle(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				float o = System.Convert.ToSingle(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<ulong>(L, 1))
			{
				ulong arg0 = LuaDLL.tolua_touint64(L, 1);
				float o = System.Convert.ToSingle(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<bool>(L, 1))
			{
				bool arg0 = LuaDLL.lua_toboolean(L, 1);
				float o = System.Convert.ToSingle(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.DateTime>(L, 1))
			{
				System.DateTime arg0 = StackTraits<System.DateTime>.To(L, 1);
				float o = System.Convert.ToSingle(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<double>(L, 1))
			{
				double arg0 = (double)LuaDLL.lua_tonumber(L, 1);
				float o = System.Convert.ToSingle(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<object>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				float o = System.Convert.ToSingle(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, System.IFormatProvider>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				float o = System.Convert.ToSingle(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object, System.IFormatProvider>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				float o = System.Convert.ToSingle(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Convert.ToSingle");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<double>(L, 1))
			{
				double arg0 = (double)LuaDLL.lua_tonumber(L, 1);
				string o = System.Convert.ToString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<long>(L, 1))
			{
				long arg0 = LuaDLL.tolua_toint64(L, 1);
				string o = System.Convert.ToString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<bool>(L, 1))
			{
				bool arg0 = LuaDLL.lua_toboolean(L, 1);
				string o = System.Convert.ToString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string o = System.Convert.ToString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.DateTime>(L, 1))
			{
				System.DateTime arg0 = StackTraits<System.DateTime>.To(L, 1);
				string o = System.Convert.ToString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<ulong>(L, 1))
			{
				ulong arg0 = LuaDLL.tolua_touint64(L, 1);
				string o = System.Convert.ToString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<object>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				string o = System.Convert.ToString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<bool, System.IFormatProvider>(L, 1))
			{
				bool arg0 = LuaDLL.lua_toboolean(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				string o = System.Convert.ToString(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, System.IFormatProvider>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				string o = System.Convert.ToString(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<int, int>(L, 1))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				string o = System.Convert.ToString(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<double, System.IFormatProvider>(L, 1))
			{
				double arg0 = (double)LuaDLL.lua_tonumber(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				string o = System.Convert.ToString(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<long, int>(L, 1))
			{
				long arg0 = LuaDLL.tolua_toint64(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				string o = System.Convert.ToString(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.DateTime, System.IFormatProvider>(L, 1))
			{
				System.DateTime arg0 = StackTraits<System.DateTime>.To(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				string o = System.Convert.ToString(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<long, System.IFormatProvider>(L, 1))
			{
				long arg0 = LuaDLL.tolua_toint64(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				string o = System.Convert.ToString(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<ulong, System.IFormatProvider>(L, 1))
			{
				ulong arg0 = LuaDLL.tolua_touint64(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				string o = System.Convert.ToString(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object, System.IFormatProvider>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				string o = System.Convert.ToString(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Convert.ToString");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToUInt16(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<long>(L, 1))
			{
				long arg0 = LuaDLL.tolua_toint64(L, 1);
				ushort o = System.Convert.ToUInt16(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				ushort o = System.Convert.ToUInt16(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<ulong>(L, 1))
			{
				ulong arg0 = LuaDLL.tolua_touint64(L, 1);
				ushort o = System.Convert.ToUInt16(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<bool>(L, 1))
			{
				bool arg0 = LuaDLL.lua_toboolean(L, 1);
				ushort o = System.Convert.ToUInt16(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.DateTime>(L, 1))
			{
				System.DateTime arg0 = StackTraits<System.DateTime>.To(L, 1);
				ushort o = System.Convert.ToUInt16(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<double>(L, 1))
			{
				double arg0 = (double)LuaDLL.lua_tonumber(L, 1);
				ushort o = System.Convert.ToUInt16(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<object>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				ushort o = System.Convert.ToUInt16(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, System.IFormatProvider>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				ushort o = System.Convert.ToUInt16(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, int>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				ushort o = System.Convert.ToUInt16(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object, System.IFormatProvider>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				ushort o = System.Convert.ToUInt16(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Convert.ToUInt16");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToUInt32(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<long>(L, 1))
			{
				long arg0 = LuaDLL.tolua_toint64(L, 1);
				uint o = System.Convert.ToUInt32(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				uint o = System.Convert.ToUInt32(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<ulong>(L, 1))
			{
				ulong arg0 = LuaDLL.tolua_touint64(L, 1);
				uint o = System.Convert.ToUInt32(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<bool>(L, 1))
			{
				bool arg0 = LuaDLL.lua_toboolean(L, 1);
				uint o = System.Convert.ToUInt32(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.DateTime>(L, 1))
			{
				System.DateTime arg0 = StackTraits<System.DateTime>.To(L, 1);
				uint o = System.Convert.ToUInt32(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<double>(L, 1))
			{
				double arg0 = (double)LuaDLL.lua_tonumber(L, 1);
				uint o = System.Convert.ToUInt32(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<object>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				uint o = System.Convert.ToUInt32(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, System.IFormatProvider>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				uint o = System.Convert.ToUInt32(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, int>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				uint o = System.Convert.ToUInt32(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object, System.IFormatProvider>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				uint o = System.Convert.ToUInt32(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Convert.ToUInt32");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToUInt64(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<long>(L, 1))
			{
				long arg0 = LuaDLL.tolua_toint64(L, 1);
				ulong o = System.Convert.ToUInt64(arg0);
				LuaDLL.tolua_pushuint64(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				ulong o = System.Convert.ToUInt64(arg0);
				LuaDLL.tolua_pushuint64(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<ulong>(L, 1))
			{
				ulong arg0 = LuaDLL.tolua_touint64(L, 1);
				ulong o = System.Convert.ToUInt64(arg0);
				LuaDLL.tolua_pushuint64(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<bool>(L, 1))
			{
				bool arg0 = LuaDLL.lua_toboolean(L, 1);
				ulong o = System.Convert.ToUInt64(arg0);
				LuaDLL.tolua_pushuint64(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.DateTime>(L, 1))
			{
				System.DateTime arg0 = StackTraits<System.DateTime>.To(L, 1);
				ulong o = System.Convert.ToUInt64(arg0);
				LuaDLL.tolua_pushuint64(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<double>(L, 1))
			{
				double arg0 = (double)LuaDLL.lua_tonumber(L, 1);
				ulong o = System.Convert.ToUInt64(arg0);
				LuaDLL.tolua_pushuint64(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<object>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				ulong o = System.Convert.ToUInt64(arg0);
				LuaDLL.tolua_pushuint64(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, System.IFormatProvider>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				ulong o = System.Convert.ToUInt64(arg0, arg1);
				LuaDLL.tolua_pushuint64(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, int>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				ulong o = System.Convert.ToUInt64(arg0, arg1);
				LuaDLL.tolua_pushuint64(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object, System.IFormatProvider>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				ulong o = System.Convert.ToUInt64(arg0, arg1);
				LuaDLL.tolua_pushuint64(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Convert.ToUInt64");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ChangeType(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.TypeCode>(L, 2))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.TypeCode arg1 = (System.TypeCode)ToLua.ToObject(L, 2);
				object o = System.Convert.ChangeType(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Type>(L, 2))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				object o = System.Convert.ChangeType(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.TypeCode, System.IFormatProvider>(L, 2))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.TypeCode arg1 = (System.TypeCode)ToLua.ToObject(L, 2);
				System.IFormatProvider arg2 = (System.IFormatProvider)ToLua.ToObject(L, 3);
				object o = System.Convert.ChangeType(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Type, System.IFormatProvider>(L, 2))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.IFormatProvider arg2 = (System.IFormatProvider)ToLua.ToObject(L, 3);
				object o = System.Convert.ChangeType(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Convert.ChangeType");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DBNull(IntPtr L)
	{
		try
		{
			ToLua.Push(L, System.Convert.DBNull);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

